<?xml version="1.0" encoding="UTF-8"?>
<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:osgix="http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium"
	xmlns:beans="http://www.springframework.org/schema/beans" xmlns:ctx="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:util="http://www.springframework.org/schema/util"
	xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium
		http://www.eclipse.org/gemini/blueprint/schema/blueprint-compendium/gemini-blueprint-compendium.xsd
		http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
		http://www.springframework.org/schema/context
		http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/tx
		http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">

	<!-- Configuration -->

	<osgix:cm-properties id="dao.jdbc.cfg"
		persistent-id="org.eniware.edge.dao.jdbc">
		<beans:prop key="DatabaseSetup.initSqlResource">classpath:/net/eniwarenetwork/Edge/dao/jdbc/derby-init.sql</beans:prop>
		<beans:prop key="restoreFromBackup.exceptionThreshold">1</beans:prop>
		<beans:prop key="restoreFromBackup.secondsDelay">30</beans:prop>
		<beans:prop key="restoreFromBackup.resourceProviderFilter">org.eniware.edge.settings.ca.CASettingsService</beans:prop>
		<beans:prop key="restoreFromBackup.sqlStateRegex">XS(?!DB6).*</beans:prop>
		<beans:prop key="shutdown.sqlStateRegex">XSDB6</beans:prop>
		<beans:prop key="jdbc.driver">org.apache.derby.jdbc.EmbeddedDriver</beans:prop>
		<beans:prop key="jdbc.url">jdbc:derby:eniwareedge;create=true;upgrade=true</beans:prop>
		<beans:prop key="jdbc.user">eniwareedge</beans:prop>
		<beans:prop key="jdbc.pass">eniwareedge</beans:prop>
		<beans:prop key="jdbc.pool.maxIdle">0</beans:prop>
		<beans:prop key="jdbc.pool.maxActive">3</beans:prop>
		<beans:prop key="jdbc.pool.maxWait">20000</beans:prop>
		<beans:prop key="jdbc.pool.maxAge">0</beans:prop>
		<beans:prop key="jdbc.pool.timeBetweenEvictionRunsMillis">120000</beans:prop>
		<beans:prop key="jdbc.pool.minEvictableIdleTimeMillis">300000</beans:prop>
		<beans:prop key="jdbc.pool.removeAbandoned">true</beans:prop>
		<beans:prop key="jdbc.pool.removeAbandonedTimeout">600</beans:prop>
		<beans:prop key="jdbc.pool.abandonWhenPercentageFull">70</beans:prop>
		<beans:prop key="jdbc.pool.logAbandoned">false</beans:prop>
		<beans:prop key="jdbc.pool.validationQuery">VALUES CURRENT_DATE</beans:prop>
		<beans:prop key="jdbc.pool.interceptors">ConnectionState;StatementCache(prepared=true,callable=true,max=50);ResetAbandonedTimer</beans:prop>
		<beans:prop key="jdbc.pool.jmxEnabled">true</beans:prop>
		<beans:prop key="JdbcDatumDao.maxFetchForUpload">240</beans:prop>
		<beans:prop key="JdbcGeneralEdgeDatumDao.initSqlResource">classpath:/net/eniwarenetwork/Edge/dao/jdbc/general/derby-generalEdgedatum-init.sql</beans:prop>
		<beans:prop key="JdbcGeneralEdgeDatumDao.sqlResourcePrefix">derby-generalEdgedatum</beans:prop>
		<beans:prop key="JdbcGeneralLocationDatumDao.initSqlResource">classpath:/net/eniwarenetwork/Edge/dao/jdbc/general/derby-generallocdatum-init.sql</beans:prop>
		<beans:prop key="JdbcGeneralLocationDatumDao.sqlResourcePrefix">derby-generallocdatum</beans:prop>
		<beans:prop key="job.generalEdgeDatumCleaner.cron">35 0 0/2 ? * *</beans:prop>
		<beans:prop key="job.generalEdgeDatumCleaner.uploadedTrimHours">4</beans:prop>
		<beans:prop key="job.generalEdgeDatumTrimmer.cron">35 0 1/2 ? * *</beans:prop>
		<beans:prop key="job.generalEdgeDatumTrimmer.trimMinutes">120</beans:prop>
		<beans:prop key="job.generalEdgeDatumTrimmer.fileSystemUseThreshold">90</beans:prop>
		<beans:prop key="job.generalEdgeDatumTrimmer.tableSizeThreshold">1048576</beans:prop>
		<beans:prop key="job.generalLocationDatumCleaner.cron">35 30 0/2 ? * *</beans:prop>
		<beans:prop key="job.generalLocationDatumCleaner.uploadedTrimHours">4</beans:prop>
		<beans:prop key="job.generalLocationDatumTrimmer.cron">35 30 1/2 ? * *</beans:prop>
		<beans:prop key="job.generalLocationDatumTrimmer.trimMinutes">120</beans:prop>
		<beans:prop key="job.generalLocationDatumTrimmer.fileSystemUseThreshold">90</beans:prop>
		<beans:prop key="job.generalLocationDatumTrimmer.tableSizeThreshold">1048576</beans:prop>
	</osgix:cm-properties>

	<!-- Service References -->

	<reference id="dataSourceFactory" interface="org.osgi.service.jdbc.DataSourceFactory"
		filter="(osgi.jdbc.driver.class=${jdbc.driver})" />

	<bean id="eventAdmin" class="org.eniware.util.DynamicServiceTracker">
		<property name="bundleContext" ref="bundleContext" />
		<property name="serviceClassName" value="org.osgi.service.event.EventAdmin" />
	</bean>
	
	<bean id="databaseSystemService" class="org.eniware.util.DynamicServiceTracker">
		<property name="bundleContext" ref="bundleContext" />
		<property name="serviceClassName" value="org.eniware.edge.dao.jdbc.DatabaseSystemService" />
		<property name="serviceFilter" value="(db=Edge)"/>
	</bean>

	<bean id="identityService" class="org.eniware.util.DynamicServiceTracker">
		<property name="bundleContext" ref="bundleContext" />
		<property name="serviceClassName" value="org.eniware.edge.IdentityService" />
	</bean>

	<!-- Published Services -->

	<service ref="settingDao" interface="org.eniware.edge.dao.SettingDao"
		depends-on="databaseSetup" />

	<service ref="dataSource" interface="javax.sql.DataSource"
		depends-on="databaseSetup">
		<service-properties>
			<entry key="db" value="Edge" />
		</service-properties>
	</service>

	<service ref="jdbcTemplate" interface="org.springframework.jdbc.core.JdbcOperations">
		<service-properties>
			<entry key="db" value="Edge" />
		</service-properties>
	</service>

	<service ref="txManager"
		interface="org.springframework.transaction.PlatformTransactionManager"
		depends-on="databaseSetup">
		<service-properties>
			<entry key="db" value="Edge" />
		</service-properties>
	</service>

	<service ref="generalEdgeDatumDao" ranking="1" depends-on="databaseSetup">
		<interfaces>
			<value>org.eniware.edge.dao.DatumDao</value>
			<value>org.eniware.edge.dao.jdbc.JdbcDao</value>
		</interfaces>
		<service-properties>
			<beans:entry key="datumClassName"
				value="org.eniware.edge.domain.GeneralEdgeDatum" />
		</service-properties>
	</service>

	<service ref="generalEdgeDatumCleaner" interface="org.eniware.edge.job.TriggerAndJobDetail" />

	<service ref="generalEdgeDatumTrimmer" interface="org.eniware.edge.job.TriggerAndJobDetail" />

	<service ref="generalLocationDatumDao" ranking="1" depends-on="databaseSetup">
		<interfaces>
			<value>org.eniware.edge.dao.DatumDao</value>
			<value>org.eniware.edge.dao.jdbc.JdbcDao</value>
		</interfaces>
		<service-properties>
			<beans:entry key="datumClassName"
				value="org.eniware.edge.domain.GeneralLocationDatum" />
		</service-properties>
	</service>

	<service ref="generalLocationDatumCleaner" interface="org.eniware.edge.job.TriggerAndJobDetail" />

	<service ref="generalLocationDatumTrimmer" interface="org.eniware.edge.job.TriggerAndJobDetail" />

	<!-- Supporting Services -->

	<ctx:property-placeholder properties-ref="dao.jdbc.cfg" />

	<bean id="dataSource"
		class="org.eniware.dao.jdbc.TomcatJdbcPoolDataSourceFactoryBean">
		<property name="poolProperties">
			<bean class="org.apache.tomcat.jdbc.pool.PoolProperties">
				<property name="jmxEnabled" value="${jdbc.pool.jmxEnabled}" />
				<property name="testWhileIdle" value="false" />
				<property name="testOnBorrow" value="true" />
				<property name="testOnConnect" value="true" />
				<property name="validationQuery" value="${jdbc.pool.validationQuery}" />
				<property name="testOnReturn" value="false" />
				<property name="validationInterval" value="30000" />
				<property name="timeBetweenEvictionRunsMillis" value="${jdbc.pool.timeBetweenEvictionRunsMillis}" />
				<property name="maxActive" value="${jdbc.pool.maxActive}" />
				<property name="initialSize" value="0" />
				<property name="maxWait" value="${jdbc.pool.maxWait}" />
				<property name="minEvictableIdleTimeMillis" value="${jdbc.pool.minEvictableIdleTimeMillis}" />
				<property name="minIdle" value="0" />
				<property name="maxIdle" value="${jdbc.pool.maxActive}" />
				<property name="maxAge" value="${jdbc.pool.maxAge}"/>
				<property name="removeAbandoned" value="${jdbc.pool.removeAbandoned}"/>
				<property name="removeAbandonedTimeout" value="${jdbc.pool.removeAbandonedTimeout}" />
				<property name="abandonWhenPercentageFull" value="${jdbc.pool.abandonWhenPercentageFull}"/>
				<property name="logAbandoned" value="${jdbc.pool.logAbandoned}" />
				<property name="jdbcInterceptors" value="${jdbc.pool.interceptors}" />
			</bean>
		</property>
		<property name="dataSourceFactory" ref="dataSourceFactory" />
		<property name="dataSourceProperties">
			<props>
				<prop key="url">${jdbc.url}</prop>
				<prop key="user">${jdbc.user}</prop>
				<prop key="password">${jdbc.pass}</prop>
			</props>
		</property>
		<property name="bundleContext" ref="bundleContext" />
		<property name="sqlExceptionHandlerSupport" value="true" />
		<property name="registerJmx" value="${jdbc.pool.jmxEnabled}"/>
		<property name="jmxName" value="EniwareEdge"/>
	</bean>

	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- PlatformTransactionManager: local JDBC transaction manager. -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<service id="restoreFromBackupHandler" interface="org.eniware.dao.jdbc.SQLExceptionHandler">
		<bean
			class="org.eniware.edge.dao.jdbc.RestoreFromBackupSQLExceptionHandler">
			<argument ref="bundleContext" />
			<argument value="${restoreFromBackup.exceptionThreshold}" />
			<property name="restoreDelaySeconds" value="${restoreFromBackup.secondsDelay}" />
			<property name="backupResourceProviderFilter" value="${restoreFromBackup.resourceProviderFilter}" />
			<property name="sqlStateRegex" value="${restoreFromBackup.sqlStateRegex}" />
			<property name="identityService" ref="identityService"/>
		</bean>
	</service>

	<service id="shutdownHandler" interface="org.eniware.dao.jdbc.SQLExceptionHandler">
		<bean class="org.eniware.edge.dao.jdbc.ShutdownSQLExceptionHandler">
			<property name="sqlStateRegex" value="${shutdown.sqlStateRegex}" />
		</bean>
	</service>

	<bean id="databaseSetup" class="org.eniware.edge.dao.jdbc.DatabaseSetup"
		init-method="init" depends-on="restoreFromBackupHandler shutdownHandler">
		<property name="dataSource" ref="dataSource" />
		<property name="initSqlResource" value="${DatabaseSetup.initSqlResource}" />
	</bean>

	<bean id="settingDao" class="org.eniware.edge.dao.jdbc.JdbcSettingDao">
		<property name="dataSource" ref="dataSource" />
		<property name="eventAdmin" ref="eventAdmin" />
		<property name="transactionTemplate">
			<bean class="org.springframework.transaction.support.TransactionTemplate">
				<argument ref="txManager" />
			</bean>
		</property>
	</bean>

	<bean id="objectMapper" class="org.eniware.util.ObjectMapperFactoryBean">
		<property name="featuresToEnable">
			<list>
				<value>#{T(com.fasterxml.jackson.databind.DeserializationFeature).USE_BIG_DECIMAL_FOR_FLOATS}
				</value>
			</list>
		</property>
	</bean>

	<!-- Use Java @Transactional annotations to declare transactions. -->
	<tx:annotation-driven transaction-manager="txManager" />

	<bean id="jobMessageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames" value="org.eniware.edge.dao.jdbc.general.JOBS" />
	</bean>
	
	<!-- General Edge Datum -->

	<bean id="generalEdgeDatumDao"
		class="org.eniware.edge.dao.jdbc.general.JdbcGeneralEdgeDatumDao"
		init-method="init">
		<property name="objectMapper" ref="objectMapper" />
		<property name="dataSource" ref="dataSource" />
		<property name="eventAdmin" ref="eventAdmin" />
		<property name="initSqlResource" value="${JdbcGeneralEdgeDatumDao.initSqlResource}" />
		<property name="sqlResourcePrefix" value="${JdbcGeneralEdgeDatumDao.sqlResourcePrefix}" />
		<property name="maxFetchForUpload" value="${JdbcDatumDao.maxFetchForUpload}" />
	</bean>

	<bean id="generalEdgeDatumCleaner" class="org.eniware.edge.job.SimpleTriggerAndJobDetail">
		<property name="trigger" ref="generalEdgeDatumCleanerTrigger"/>
		<property name="jobDetail" ref="generalEdgeDatumCleanerJob"/>
		<property name="messageSource" ref="jobMessageSource"/>
	</bean>

	<bean id="generalEdgeDatumCleanerTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="generalEdgeDatumCleanerJob" />
		<property name="cronExpression" value="${job.generalEdgeDatumCleaner.cron}" />
		<property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING" />
	</bean>

	<bean id="generalEdgeDatumCleanerJob"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="org.eniware.edge.job.DatumDaoCleanerJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="datumDao" value-ref="generalEdgeDatumDao" />
				<entry key="hours" value="${job.generalEdgeDatumCleaner.uploadedTrimHours}"/>
			</map>
		</property>
	</bean>
	
	<bean id="generalEdgeDatumTrimManager" class="org.eniware.edge.dao.jdbc.TimeBasedTableDiskSizeManager">
		<property name="jdbcOperations" ref="jdbcTemplate"/>
		<property name="dbSystemService" ref="databaseSystemService"/>
		<property name="tableName" value="SN_GENERAL_Edge_DATUM"/>
		<property name="trimMinutes" value="${job.generalEdgeDatumTrimmer.trimMinutes}"/>
		<property name="maxFileSystemUseThreshold" value="${job.generalEdgeDatumTrimmer.fileSystemUseThreshold}"/>
		<property name="minTableSizeThreshold" value="${job.generalEdgeDatumTrimmer.tableSizeThreshold}"/>
	</bean>

	<bean id="generalEdgeDatumTrimmer" class="org.eniware.edge.job.SimpleTriggerAndJobDetail">
		<property name="trigger" ref="generalEdgeDatumTrimmerTrigger"/>
		<property name="jobDetail" ref="generalEdgeDatumTrimmerJob"/>
		<property name="messageSource" ref="jobMessageSource"/>
	</bean>

	<bean id="generalEdgeDatumTrimmerTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="generalEdgeDatumTrimmerJob" />
		<property name="cronExpression" value="${job.generalEdgeDatumTrimmer.cron}" />
		<property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING" />
	</bean>

	<bean id="generalEdgeDatumTrimmerJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="concurrent" value="false"/>
		<property name="targetObject" ref="generalEdgeDatumTrimManager"/>
		<property name="targetMethod" value="performMaintenance"/>
	</bean>
	
	<!-- General Location Datum -->

	<bean id="generalLocationDatumDao"
		class="org.eniware.edge.dao.jdbc.general.JdbcGeneralLocationDatumDao"
		init-method="init">
		<property name="objectMapper" ref="objectMapper" />
		<property name="dataSource" ref="dataSource" />
		<property name="eventAdmin" ref="eventAdmin" />
		<property name="initSqlResource"
			value="${JdbcGeneralLocationDatumDao.initSqlResource}" />
		<property name="sqlResourcePrefix"
			value="${JdbcGeneralLocationDatumDao.sqlResourcePrefix}" />
		<property name="maxFetchForUpload" value="${JdbcDatumDao.maxFetchForUpload}" />
	</bean>

	<bean id="generalLocationDatumCleaner" class="org.eniware.edge.job.SimpleTriggerAndJobDetail">
		<property name="trigger" ref="generalLocationDatumCleanerTrigger" />
		<property name="jobDetail" ref="generalLocationDatumCleanerJob" />
		<property name="messageSource" ref="jobMessageSource" />
	</bean>

	<bean id="generalLocationDatumCleanerTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="generalLocationDatumCleanerJob" />
		<property name="cronExpression" value="${job.generalLocationDatumCleaner.cron}" />
		<property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING" />
	</bean>

	<bean id="generalLocationDatumCleanerJob"
		class="org.springframework.scheduling.quartz.JobDetailFactoryBean">
		<property name="jobClass" value="org.eniware.edge.job.DatumDaoCleanerJob" />
		<property name="jobDataAsMap">
			<map>
				<entry key="datumDao" value-ref="generalLocationDatumDao" />
				<entry key="hours" value="${job.generalEdgeDatumCleaner.uploadedTrimHours}"/>
			</map>
		</property>
	</bean>
	
	<bean id="generalLocationDatumTrimManager" class="org.eniware.edge.dao.jdbc.TimeBasedTableDiskSizeManager">
		<property name="jdbcOperations" ref="jdbcTemplate"/>
		<property name="dbSystemService" ref="databaseSystemService"/>
		<property name="tableName" value="SN_GENERAL_LOC_DATUM"/>
		<property name="trimMinutes" value="${job.generalLocationDatumTrimmer.trimMinutes}"/>
		<property name="maxFileSystemUseThreshold" value="${job.generalLocationDatumTrimmer.fileSystemUseThreshold}"/>
		<property name="minTableSizeThreshold" value="${job.generalLocationDatumTrimmer.tableSizeThreshold}"/>
	</bean>

	<bean id="generalLocationDatumTrimmer" class="org.eniware.edge.job.SimpleTriggerAndJobDetail">
		<property name="trigger" ref="generalLocationDatumTrimmerTrigger" />
		<property name="jobDetail" ref="generalLocationDatumTrimmerJob" />
		<property name="messageSource" ref="jobMessageSource" />
	</bean>

	<bean id="generalLocationDatumTrimmerTrigger"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="generalLocationDatumTrimmerJob" />
		<property name="cronExpression" value="${job.generalLocationDatumTrimmer.cron}" />
		<property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING" />
	</bean>

	<bean id="generalLocationDatumTrimmerJob"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="concurrent" value="false"/>
		<property name="targetObject" ref="generalLocationDatumTrimManager"/>
		<property name="targetMethod" value="performMaintenance"/>
	</bean>
	
</blueprint>
